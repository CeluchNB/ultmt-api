name: Deploy

on:
  push:
    branches:
      - dev
      - e2e
      - main
  workflow_call:

jobs:
  get-environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
    steps:
      - name: Some check on branch
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_name=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/e2e" ]; then
            echo "env_name=e2e" >> $GITHUB_OUTPUT
          else
            echo "env_name=dev" >> $GITHUB_OUTPUT
          fi
  test:
    runs-on: ubuntu-latest
    environment:
      name: Test

    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v3

      - name: Create env
        run: |
          cd tests
          mkdir config
          cd config
          touch .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo MONGOOSE_URL=${{ secrets.DOCKER_MONGOOSE_URL }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} >> .env
          echo REDIS_URL=${{ secrets.REDIS_URL }}
          cd ..
      
      # - name: Run Docker CI container
      #   run: docker compose -f docker-compose.dev.yml up -d --build
        
      # - name: Add dependencies
      #   run: yarn install

      # - name: Run tests
      #   run: yarn test
      
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}

      # - name: Stop containers
      #   if: always()
      #   run: docker compose -f docker-compose.dev.yml down

  deploy:
    needs: [test, get-environment]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.get-environment.outputs.env_name }}
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v3
      
      - name: 'Authenticate to GCP'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      
      - name: "Deploy Registry"
        run: |
          gcloud builds submit --config=cloudbuild.${{ needs.get-environment.outputs.env_name }}.yml .

      - name: "Deploy Cloud Run"
        uses: 'google-github-actions/deploy-cloudrun@v1'
        with:
          service: 'ultmt-api'
          image: ${{ vars.CONTAINER_REPOSITORY }}
          region: us-east4
          secrets: |
            JWT_SECRET=ULTMT_JWT_SECRET:latest
            SENDGRID_API_KEY=SENDGRID_API_KEY:latest
            MONGOOSE_URL=ULTMT_MONGOOSE_URL:latest
            REDIS_URL=REDIS_URL:latest
         
          

