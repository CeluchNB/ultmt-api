    
name: Docker CI

on:
  push:
    branches-ignore:
      - dev
      - e2e
      - prod
  pull_request:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v3

      - name: Create env
        run: |
          cd src
          mkdir config
          cd config
          touch .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo MONGOOSE_URL=${{ secrets.MONGOOSE_URL }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} >> .env
          echo REDIS_URL=${{ secrets.REDIS_URL }}
          cd ..
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: false

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  test:
    runs-on: ubuntu-latest
    
    environment:
      name: Test

    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v3

      - name: Create env
        run: |
          cd tests
          mkdir config
          cd config
          touch .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo MONGOOSE_URL=${{ secrets.DOCKER_MONGOOSE_URL }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} >> .env
          echo REDIS_URL=${{ secrets.REDIS_URL }}
          cd ..
      
      - name: Run Docker CI container
        run: docker compose -f docker-compose.dev.yml up -d --build
        
      - name: Add dependencies
        run: yarn install

      - name: Run tests
        run: yarn test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Stop containers
        if: always()
        run: docker compose -f docker-compose.dev.yml down
